diff --git a/.gitignore b/.gitignore
index 3d88c94..eeb7ee8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,4 +3,5 @@ main.py
 __pycache__/
 *.py[cod]
 *$py.class
-note
\ No newline at end of file
+note
+diff
\ No newline at end of file
diff --git a/x_lolo/post.py b/x_lolo/post.py
index 1339ddf..b0432e2 100644
--- a/x_lolo/post.py
+++ b/x_lolo/post.py
@@ -1,12 +1,12 @@
-from .session import Session
-from datetime import date as Date
+# from .session import Session
+from datetime import date as Date, datetime
 
 
 class Post:
-    def __init__(self, linked_session: Session):
-        self.id: int | None = None
+    def __init__(self, linked_session):
+        self.id: str | None = None
         self.owner_username: str | None = None
-        self.owner_user_id: int | None = None
+        self.owner_user_id: str | None = None
         self.linked_session = linked_session
         self.creation_date: Date | None = None
         self.like: int | None = None
@@ -30,3 +30,21 @@ class Post:
     def share(self):
         # TODO
         return
+
+    def load_by_creation_result(self, result):
+        try:
+            result = result["data"]["create_tweet"]["tweet_results"]["result"]
+            self.id = result["rest_id"]
+            self.creation_date = datetime.strptime(
+                result["legacy"]["created_at"], '%a %b %d %H:%M:%S %z %Y')
+            self.like = 0
+            self.view = 0
+            self.repost = 0
+            self.comment_count = 0
+            self.owner_user_id= self.linked_session.user_id 
+            self.text_content = result["legacy"]["full_text"]
+            result = result ["core"]["user_results"]["result"]
+            self.owner_username  = result["legacy"]["screen_name"]
+        except Exception :
+            raise Exception("Error func : load_by_creation_result ")
+        
diff --git a/x_lolo/session.py b/x_lolo/session.py
index 7424a5f..79e177f 100644
--- a/x_lolo/session.py
+++ b/x_lolo/session.py
@@ -6,6 +6,7 @@ from pathlib import Path
 from typing import Dict, Any
 from .request_payload_and_headers import TEXT_POST_REQUEST_COMPONENTS
 import requests
+from .post import Post
 
 
 class Session:
@@ -38,7 +39,7 @@ class Session:
             "x_guest_token": session.x_guest_token,
             "flow_token": session.flow_token,
             "x_csrf_token": session.x_csrf_token,
-            "user_id": session.user_id 
+            "user_id": session.user_id
         }
 
         file_path = Path(filename)
@@ -63,12 +64,19 @@ class Session:
 
         return self
 
-    def post_text(self, text):
+    def add_post(self, text: str, media_url: str | None = None) -> Post:
+        # TODO: handle media upload
+
         response = requests.post(
             url=TEXT_POST_REQUEST_COMPONENTS["url"], headers=TEXT_POST_REQUEST_COMPONENTS["headers"](self), json=TEXT_POST_REQUEST_COMPONENTS["payload"](text))
-        if response.status_code!= 200:
+        if response.status_code != 200:
             raise Exception(
                 f"Error: {response.text}. Status code: {response.status_code}")
-        response = response.json()
-        if "errors" in response:
-            raise Exception(f"X_API_ERROR_MESSAGE: {response['errors']}")
\ No newline at end of file
+        response_json = response.json()
+        if "errors" in response_json:
+            print(f"X_API_ERROR_MESSAGE: {response_json['errors']}")
+            return None
+
+        new_post = Post(self)
+        new_post.load_by_creation_result(response_json)
+        return new_post
